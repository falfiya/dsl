import dsl.Runtime

namespace Synchronous

variable {ùìú : Type}

structure FairLossLink.Deliver where
   src : Process
   dest : Process
   msg : ùìú
   sentAt : Time

def FairLossLink.TryDeliver (pred : @Deliver ùìú -> Prop) : Type
   := Option {d // pred d}

structure FairLossLink.TryDeliverStream (pred : @Deliver ùìú -> Prop) where
   Td := TryDeliver pred
   stream : Stream' <| Td
   uniqueTimes :
      ‚àÄ n, ¬¨‚àÉ m, n != m ‚àß 
      -> 

structure FairLossLink where
   send : {_ : Unit}
      -> (src : Process)
      -> (dest : Process)
      -> (msg : ùìú)
      -> (sendAt : Time)
      -> FairLossLink.TryDeliver (¬∑ = ‚ü®src, dest, msg, sendAt‚ü©)
   selfSend : ‚àÄ (p : Process) (msg : ùìú) (t : Time),
      send p p msg t = some ‚ü®‚ü®p, p, msg, t‚ü©, by rfl‚ü©
   fairLoss : {Message : Type}
      -> (src : Process)
      -> (dest : Process)
      -> (msg : Message)
      -> (sendAt : Time)
      -- Add proof that all of the options have different times
      -> Stream' (Option {d : FairLossLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt})
      -> Stream' {d : FairLossLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt}
   -- This one is obvious and follows from fairLoss
   eventualDelivery : {Message : Type}
      -> (src : Process)
      -> (dest : Process)
      -> (msg : Message)
      -> (sendAt : Time)
      -> Stream' (Option {d : FairLossLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt})
      -> ‚àÉt, t ‚â• sendAt ‚àß send src dest msg t = some ‚ü®‚ü®src, dest, msg, t‚ü©, by rfl‚ü©
   finiteDuplication : NoProof
   noCreation : NoProof

structure StubbornLink.Deliver {Message : Type} where
   src : Process
   dest : Process
   msg : Message
   sentAt : Time

structure StubbornLink where
   fll : FairLossLink
   -- This is also stubborn delivery
   send : {Message : Type}
      -> (src : Process)
      -> (dest : Process)
      -> (msg : Message)
      -> (sendAt : Time)
      -> Stream' {d : StubbornLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt}
   noCreation : NoProof

-- This is defined after the StubbornLink because it's the StubbornLink's job
-- to prove this.
def FairLossLink.infiniteSend
   (fll : FairLossLink) (src : Process) (dest : Process) (msg : Message) (sendAt : Time)
   : Stream' (Option {d : FairLossLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt})
   :=
      (Time.all.add sendAt).map fun ‚ü®sendAt', p_sendAt'‚ü© =>
         (fll.send src dest msg sendAt').map (by
            intro ‚ü®delivery, p_delivery‚ü©
            constructor
            case val => exact delivery
            refine ‚ü®?_, ?_, ?_, ?_‚ü©
            ¬∑ rw [p_delivery]
            ¬∑ rw [p_delivery]
            ¬∑ rw [p_delivery]
            ¬∑ {
               rw [p_delivery]
               simp
               exact p_sendAt'
            }
         )

def StubbornLink.fromFLL (fll : FairLossLink) : StubbornLink := {
   fll := fll,
   send
      {Message : Type} (src : Process) (dest : Process) (msg : Message) (sendAt : Time)
      : Stream' {d : StubbornLink.Deliver // d.src = src ‚àß d.dest = dest ‚àß d.msg = msg ‚àß d.sentAt ‚â• sendAt}
      := by
         let infinteSends := fll.infiniteSend src dest msg sendAt
         let unfairLoss := fll.fairLoss src dest msg sendAt infinteSends
         exact unfairLoss.map (by
            intro ‚ü®fld, ‚ü®p_fldSrc, p_fldDest, p_fldMsg, p_fldSentAt‚ü©‚ü©
            constructor
            -- first construct Stubborn Delivery from Fair Loss Delivery
            case val => exact ‚ü®fld.src, fld.dest, fld.msg, fld.sentAt‚ü©
            simp
            exact ‚ü®p_fldSrc, p_fldDest, p_fldMsg, p_fldSentAt‚ü©
         )
   noCreation := default
}

end Synchronous
